import React, { useState, useEffect, useRef } from 'react';

interface FormulaAutocompleteProps {
  isVisible: boolean;
  position: { x: number; y: number };
  currentValue: string;
  onSelect: (formula: string) => void;
  onClose: () => void;
}

interface FormulaSuggestion {
  id: string;
  name: string;
  description: string;
  formula: string;
  category: 'math' | 'financial' | 'statistical' | 'logical';
}

const FormulaAutocomplete: React.FC<FormulaAutocompleteProps> = ({
  isVisible,
  position,
  currentValue,
  onSelect,
  onClose
}) => {
  const [suggestions, setSuggestions] = useState<FormulaSuggestion[]>([]);
  const [filteredSuggestions, setFilteredSuggestions] = useState<FormulaSuggestion[]>([]);
  const [selectedIndex, setSelectedIndex] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);

  // –ë–∞–∑–∞ —Ñ–æ—Ä–º—É–ª
  const formulaDatabase: FormulaSuggestion[] = [
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
    {
      id: 'sum',
      name: '–°–£–ú–ú',
      description: '–°—É–º–º–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—á–µ–µ–∫',
      formula: '=–°–£–ú–ú(B3:B7)',
      category: 'math'
    },
    {
      id: 'average',
      name: '–°–†–ó–ù–ê–ß',
      description: '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
      formula: '=–°–†–ó–ù–ê–ß(B3:B7)',
      category: 'math'
    },
    {
      id: 'multiply',
      name: '–£–ú–ù–û–ñ',
      description: '–£–º–Ω–æ–∂–µ–Ω–∏–µ',
      formula: '=B3*B4',
      category: 'math'
    },
    {
      id: 'divide',
      name: '–î–ï–õ',
      description: '–î–µ–ª–µ–Ω–∏–µ',
      formula: '=B3/B4',
      category: 'math'
    },
    {
      id: 'percent',
      name: '–ü–†–û–¶–ï–ù–¢',
      description: '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —á–∏—Å–ª–∞',
      formula: '=B3*0.12',
      category: 'math'
    },

    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã
    {
      id: 'revenue',
      name: '–í–´–†–£–ß–ö–ê',
      description: '–†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏',
      formula: '=B3*B4*B5',
      category: 'financial'
    },
    {
      id: 'gross_profit',
      name: '–í–ê–õ–û–í–ê–Ø_–ü–†–ò–ë–´–õ–¨',
      description: '–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å',
      formula: '=B3-B4',
      category: 'financial'
    },
    {
      id: 'operating_profit',
      name: '–û–ü–ï–†–ê–¶–ò–û–ù–ù–ê–Ø_–ü–†–ò–ë–´–õ–¨',
      description: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å',
      formula: '=B6-B8-B9',
      category: 'financial'
    },
    {
      id: 'net_profit',
      name: '–ß–ò–°–¢–ê–Ø_–ü–†–ò–ë–´–õ–¨',
      description: '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å',
      formula: '=B14-B15',
      category: 'financial'
    },
    {
      id: 'margin',
      name: '–ú–ê–†–ñ–ê',
      description: '–†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏',
      formula: '=(B6/B3)*100',
      category: 'financial'
    },
    {
      id: 'vat',
      name: '–ù–î–°',
      description: '–†–∞—Å—á–µ—Ç –ù–î–°',
      formula: '=B7*0.12',
      category: 'financial'
    },

    // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
    {
      id: 'growth',
      name: '–†–û–°–¢',
      description: '–¢–µ–º–ø —Ä–æ—Å—Ç–∞',
      formula: '=((B4-B3)/B3)*100',
      category: 'statistical'
    },
    {
      id: 'forecast',
      name: '–ü–†–û–ì–ù–û–ó',
      description: '–õ–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑',
      formula: '=–ü–†–û–ì–ù–û–ó(B4,A3:A4,B3:B4)',
      category: 'statistical'
    },

    // –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
    {
      id: 'if',
      name: '–ï–°–õ–ò',
      description: '–£—Å–ª–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞',
      formula: '=–ï–°–õ–ò(B3>1000000,"–í—ã—Å–æ–∫–∞—è","–ù–∏–∑–∫–∞—è")',
      category: 'logical'
    },
    {
      id: 'and',
      name: '–ò',
      description: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò',
      formula: '=–ò(B3>0,B4>0)',
      category: 'logical'
    },
    {
      id: 'or',
      name: '–ò–õ–ò',
      description: '–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –ò–õ–ò',
      formula: '=–ò–õ–ò(B3>1000000,B4>500000)',
      category: 'logical'
    }
  ];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞
  useEffect(() => {
    if (currentValue.startsWith('=')) {
      const searchTerm = currentValue.substring(1).toLowerCase();
      const filtered = formulaDatabase.filter(formula =>
        formula.name.toLowerCase().includes(searchTerm) ||
        formula.description.toLowerCase().includes(searchTerm)
      );
      setFilteredSuggestions(filtered);
      setSelectedIndex(0);
    } else {
      setFilteredSuggestions([]);
    }
  }, [currentValue]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!isVisible) return;

      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          setSelectedIndex(prev => 
            prev < filteredSuggestions.length - 1 ? prev + 1 : prev
          );
          break;
        case 'ArrowUp':
          e.preventDefault();
          setSelectedIndex(prev => prev > 0 ? prev - 1 : prev);
          break;
        case 'Enter':
          e.preventDefault();
          if (filteredSuggestions[selectedIndex]) {
            onSelect(filteredSuggestions[selectedIndex].formula);
          }
          break;
        case 'Escape':
          e.preventDefault();
          onClose();
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [isVisible, filteredSuggestions, selectedIndex, onSelect, onClose]);

  // –ö–ª–∏–∫ –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        onClose();
      }
    };

    if (isVisible) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isVisible, onClose]);

  if (!isVisible || filteredSuggestions.length === 0) return null;

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'math': return 'üî¢';
      case 'financial': return 'üí∞';
      case 'statistical': return 'üìä';
      case 'logical': return '‚ö°';
      default: return 'üìù';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'math': return 'bg-blue-100 text-blue-800';
      case 'financial': return 'bg-green-100 text-green-800';
      case 'statistical': return 'bg-purple-100 text-purple-800';
      case 'logical': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div
      ref={containerRef}
      className="absolute z-50 bg-white border border-gray-300 rounded-lg shadow-lg max-h-64 overflow-y-auto"
      style={{
        left: position.x,
        top: position.y,
        minWidth: '300px'
      }}
    >
      <div className="p-2 border-b border-gray-200 bg-gray-50">
        <div className="text-sm font-medium text-gray-700">–§–æ—Ä–º—É–ª—ã</div>
        <div className="text-xs text-gray-500">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, Enter –¥–ª—è –≤—ã–±–æ—Ä–∞</div>
      </div>
      
      <div className="py-1">
        {filteredSuggestions.map((suggestion, index) => (
          <div
            key={suggestion.id}
            className={`px-3 py-2 cursor-pointer hover:bg-blue-50 transition ${
              index === selectedIndex ? 'bg-blue-100' : ''
            }`}
            onClick={() => onSelect(suggestion.formula)}
          >
            <div className="flex items-center space-x-3">
              <span className="text-lg">{getCategoryIcon(suggestion.category)}</span>
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <span className="font-medium text-gray-800">{suggestion.name}</span>
                  <span className={`px-2 py-1 rounded-full text-xs ${getCategoryColor(suggestion.category)}`}>
                    {suggestion.category}
                  </span>
                </div>
                <div className="text-sm text-gray-600 mt-1">{suggestion.description}</div>
                <div className="text-xs font-mono text-blue-600 mt-1">{suggestion.formula}</div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredSuggestions.length === 0 && (
        <div className="px-3 py-4 text-center text-gray-500">
          <div className="text-2xl mb-2">üîç</div>
          <div>–§–æ—Ä–º—É–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
          <div className="text-xs mt-1">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</div>
        </div>
      )}
    </div>
  );
};

export default FormulaAutocomplete; 