import React, { useState } from 'react';
import { useUser } from './UserContext';

interface LoginFormProps {
  onSuccess?: () => void;
  onCancel?: () => void;
}

export const LoginForm: React.FC<LoginFormProps> = ({ onSuccess, onCancel }) => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [displayName, setDisplayName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const { login, register, guestLogin } = useUser();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      let result;
      if (isLogin) {
        result = await login(email, password);
      } else {
        result = await register(email, password, displayName);
      }

      if (result.success) {
        console.log('[LoginForm] Auth successful');
        onSuccess?.();
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('[LoginForm] Auth error:', error);
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setLoading(false);
    }
  };

  const quickLogin = async () => {
    setLoading(true);
    try {
      const result = await guestLogin();
      if (result.success) {
        onSuccess?.();
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        <div className="bg-surface rounded-2xl shadow-lg p-8 border border-border">
          {/* –õ–æ–≥–æ—Ç–∏–ø */}
          <div className="text-center mb-8">
            <div className="flex items-center justify-center gap-3 mb-4">
              <img src="/logo.svg" alt="FinSights AI" className="w-8 h-8" />
              <span className="text-2xl font-bold text-text-primary">FinSights AI</span>
            </div>
            <p className="text-text-secondary">
              {isLogin ? '–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'}
            </p>
          </div>

          {/* –§–æ—Ä–º–∞ */}
          <form onSubmit={handleSubmit} className="space-y-4">
            {!isLogin && (
              <div>
                <label className="block text-sm font-medium text-text-primary mb-1">
                  –ò–º—è
                </label>
                <input
                  type="text"
                  value={displayName}
                  onChange={(e) => setDisplayName(e.target.value)}
                  placeholder="–í–∞—à–µ –∏–º—è"
                  className="w-full px-3 py-2 border border-border rounded-lg bg-background text-text-primary focus:outline-none focus:ring-2 focus:ring-primary"
                />
              </div>
            )}

            <div>
              <label className="block text-sm font-medium text-text-primary mb-1">
                Email
              </label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="your@email.com"
                required
                autoComplete="email"
                name="email"
                className="w-full px-3 py-2 border border-border rounded-lg bg-background text-text-primary focus:outline-none focus:ring-2 focus:ring-primary"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-text-primary mb-1">
                –ü–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                required
                autoComplete={isLogin ? "current-password" : "new-password"}
                name="password"
                className="w-full px-3 py-2 border border-border rounded-lg bg-background text-text-primary focus:outline-none focus:ring-2 focus:ring-primary"
              />
            </div>

            {error && (
              <div className="bg-red-500/10 border border-red-500/20 text-red-400 px-3 py-2 rounded-lg text-sm">
                {error}
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary-hover transition disabled:opacity-50"
            >
              {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
            </button>
          </form>

          {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ */}
          <div className="mt-4 text-center">
            <button
              onClick={() => {
                setIsLogin(!isLogin);
                setError('');
              }}
              className="text-text-secondary hover:text-text-primary transition"
            >
              {isLogin ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π–¥–∏—Ç–µ'}
            </button>
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ */}
          <div className="mt-6 pt-6 border-t border-border">
            <p className="text-sm text-text-secondary text-center mb-3">–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–µ—Ä–≤–∏—Å:</p>
            <button
              onClick={quickLogin}
              disabled={loading}
              className="w-full bg-blue-500/10 text-blue-400 border border-blue-500/20 px-3 py-2 rounded-lg text-sm hover:bg-blue-500/20 transition disabled:opacity-50"
            >
              üöÄ –†–µ–∂–∏–º –≥–æ—Å—Ç—è - –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            </button>
          </div>

          {/* –û—Ç–º–µ–Ω–∞ */}
          {onCancel && (
            <div className="mt-4">
              <button
                onClick={onCancel}
                className="w-full text-text-secondary hover:text-text-primary transition"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}; 