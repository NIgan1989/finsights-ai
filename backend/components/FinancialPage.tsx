import React, { useState, useCallback, useEffect } from 'react';
import EditableCell from './EditableCell';
import AIFinancialAssistant from './AIFinancialAssistant';
import FormulaBar from './FormulaBar';
import ModelGenerator from './ModelGenerator';
import TemplateGallery from './TemplateGallery';
import ContextMenu from './ContextMenu';
import ResultsDashboard from './ResultsDashboard';

interface FinancialTemplate {
  id: string;
  name: string;
  category: string;
  description: string;
  icon: string;
  verified: boolean;
  industry: string;
  complexity: 'simple' | 'medium' | 'advanced';
  timeframe: string;
  features: string[];
  preview?: string;
}

interface FinancialModel {
  id: string;
  name: string;
  industry: string;
  template: string;
  assumptions: Record<string, any>;
  sheets: ModelSheet[];
  createdAt: string;
  lastModified: string;
}

interface ModelSheet {
  id: string;
  name: string;
  type: 'assumptions' | 'revenue' | 'expenses' | 'pnl' | 'cashflow' | 'balance' | 'results';
  icon: string;
  data: any[][];
  formulas: Record<string, string>;
  validations: Record<string, any>;
}

const FinancialPage: React.FC = () => {
  const [currentStep, setCurrentStep] = useState<'choose' | 'customize' | 'edit'>('choose');
  const [selectedTemplate, setSelectedTemplate] = useState<FinancialTemplate | null>(null);
  const [activeSheet, setActiveSheet] = useState('assumptions');
  const [currentModel, setCurrentModel] = useState<FinancialModel | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [showAIAssistant, setShowAIAssistant] = useState(false);
  const [showModelGenerator, setShowModelGenerator] = useState(false);
  const [showTemplateGallery, setShowTemplateGallery] = useState(false);
  const [customBusiness, setCustomBusiness] = useState('');
  const [editingCell, setEditingCell] = useState<{ row: number; col: number } | null>(null);
  const [currentCell, setCurrentCell] = useState({ row: -1, col: -1, value: '' });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const [contextMenu, setContextMenu] = useState<{
    isOpen: boolean;
    position: { x: number; y: number };
    cellValue: string | number;
    rowIndex: number;
    colIndex: number;
  }>({
    isOpen: false,
    position: { x: 0, y: 0 },
    cellValue: '',
    rowIndex: 0,
    colIndex: 0
  });
  const [dragState, setDragState] = useState<{
    isDragging: boolean;
    draggedRow: number | null;
    targetRow: number | null;
  }>({
    isDragging: false,
    draggedRow: null,
    targetRow: null
  });

  // –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ —Å—Ç–∏–ª–µ finmodelbuilder
  const templates: FinancialTemplate[] = [
    {
      id: 'coffee-shop',
      name: '–ö–∞—Ñ–µ / –ö–æ—Ñ–µ–π–Ω—è',
      category: '–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å',
      description: '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–∞—Ñ–µ. –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å.',
      icon: '‚òï',
      verified: true,
      industry: 'Food & Beverage',
      complexity: 'simple',
      timeframe: '3 –≥–æ–¥–∞',
      features: ['P&L –æ—Ç—á–µ—Ç', 'Cash Flow', 'Unit Economics', '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å'],
      preview: '/templates/coffee-shop-preview.png'
    },
    {
      id: 'saas-startup',
      name: 'SaaS –°—Ç–∞—Ä—Ç–∞–ø',
      category: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      description: '5-–ª–µ—Ç–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –ø–æ–¥–ø–∏—Å–æ—á–Ω–æ–π –º–æ–¥–µ–ª—å—é, LTV –∏ CAC –º–µ—Ç—Ä–∏–∫–∏.',
      icon: 'üíª',
      verified: true,
      industry: 'Technology',
      complexity: 'advanced',
      timeframe: '5 –ª–µ—Ç',
      features: ['Subscription Model', 'Churn Analysis', 'LTV/CAC', 'Fundraising'],
      preview: '/templates/saas-preview.png'
    },
    {
      id: 'ecommerce',
      name: 'E-commerce',
      category: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç–æ—Ä–≥–æ–≤–ª—è',
      description: '–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞, –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤.',
      icon: 'üõí',
      verified: true,
      industry: 'E-commerce',
      complexity: 'medium',
      timeframe: '3 –≥–æ–¥–∞',
      features: ['Traffic & Conversion', 'Marketing ROI', 'Inventory', 'Returns'],
      preview: '/templates/ecommerce-preview.png'
    },
    {
      id: 'manufacturing',
      name: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      category: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å',
      description: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å CAPEX, –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏.',
      icon: 'üè≠',
      verified: true,
      industry: 'Manufacturing',
      complexity: 'advanced',
      timeframe: '5 –ª–µ—Ç',
      features: ['CAPEX Planning', 'Depreciation', 'Working Capital', 'Capacity Planning'],
      preview: '/templates/manufacturing-preview.png'
    },
    {
      id: 'retail-store',
      name: '–†–æ–∑–Ω–∏—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω',
      category: '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
      description: '–§–∏–∑–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω —Å —É—á–µ—Ç–æ–º –∞—Ä–µ–Ω–¥—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–∞.',
      icon: 'üè™',
      verified: true,
      industry: 'Retail',
      complexity: 'medium',
      timeframe: '3 –≥–æ–¥–∞',
      features: ['Inventory Turnover', 'Foot Traffic', 'Seasonal Patterns', 'Staff Planning'],
      preview: '/templates/retail-preview.png'
    },
    {
      id: 'consulting',
      name: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
      category: '–£—Å–ª—É–≥–∏',
      description: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ —Å –ø–æ—á–∞—Å–æ–≤–æ–π –æ–ø–ª–∞—Ç–æ–π –∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.',
      icon: 'üíº',
      verified: true,
      industry: 'Professional Services',
      complexity: 'simple',
      timeframe: '3 –≥–æ–¥–∞',
      features: ['Hourly Billing', 'Project Planning', 'Utilization Rate', 'Team Scaling'],
      preview: '/templates/consulting-preview.png'
    }
  ];

  // –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
  const generateAIModel = async (businessDescription: string) => {
    setIsGenerating(true);
    try {
      const response = await fetch('/api/ai/generate-model', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          businessDescription,
          timeframe: 3,
          currency: 'KZT',
          language: 'ru'
        })
      });
      
      const aiModel = await response.json();
      
      const newModel: FinancialModel = {
        id: `ai-${Date.now()}`,
        name: `–ò–ò –ú–æ–¥–µ–ª—å: ${businessDescription}`,
        industry: aiModel.industry || 'Custom',
        template: 'ai-generated',
        assumptions: aiModel.assumptions || {},
        sheets: aiModel.sheets || [],
        createdAt: new Date().toISOString(),
        lastModified: new Date().toISOString()
      };
      
      setCurrentModel(newModel);
      setCurrentStep('edit');
    } catch (error) {
      console.error('Error generating AI model:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
  const loadTemplate = async (template: FinancialTemplate) => {
    setIsGenerating(true);
    try {
      const response = await fetch(`/api/templates/${template.id}`);
      const templateData = await response.json();
      
      const newModel: FinancialModel = {
        id: `template-${Date.now()}`,
        name: template.name,
        industry: template.industry,
        template: template.id,
        assumptions: templateData.assumptions || {},
        sheets: templateData.sheets || [],
        createdAt: new Date().toISOString(),
        lastModified: new Date().toISOString()
      };
      
      setCurrentModel(newModel);
      setCurrentStep('edit');
    } catch (error) {
      console.error('Error loading template:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
  const exportToExcel = async () => {
    if (!currentModel) return;

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const modelWithResults = {
        ...currentModel,
        sheets: [
          ...currentModel.sheets,
          {
            id: 'results',
            name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ KPI',
            type: 'results',
            icon: 'üìä',
            data: generateResultsData()
          }
        ]
      };

      const response = await fetch('http://localhost:3001/api/export/excel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(modelWithResults)
      });

      if (response.ok) {
        const contentType = response.headers.get('content-type');
        
        // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è CSV
        const csvText = await response.text();
        
        // –°–æ–∑–¥–∞–µ–º Blob –¥–ª—è CSV
        const blob = new Blob([csvText], { type: 'text/csv;charset=utf-8;' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${currentModel.name}_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è_–º–æ–¥–µ–ª—å.csv`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        console.log('Excel export successful');
      } else {
        const errorText = await response.text();
        throw new Error(errorText || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
      }
    } catch (error) {
      console.error('Export error:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  const exportToPDF = async () => {
    if (!currentModel) return;

    try {
      const modelWithResults = {
        ...currentModel,
        sheets: [
          ...currentModel.sheets,
          {
            id: 'results',
            name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ KPI',
            type: 'results',
            icon: 'üìä',
            data: generateResultsData()
          }
        ]
      };

      const response = await fetch('http://localhost:3001/api/export/pdf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(modelWithResults)
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${currentModel.name}_—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–æ—Ç—á–µ—Ç.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        console.log('PDF export successful');
      } else {
        const errorText = await response.text();
        throw new Error(errorText || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF');
      }
    } catch (error) {
      console.error('PDF export error:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á–µ—Ç–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  const exportToGoogleSheets = async () => {
    if (!currentModel) return;

    try {
      const modelWithResults = {
        ...currentModel,
        sheets: [
          ...currentModel.sheets,
          {
            id: 'results',
            name: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ KPI',
            type: 'results',
            icon: 'üìä',
            data: generateResultsData()
          }
        ]
      };

      const response = await fetch('http://localhost:3001/api/export/google-sheets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(modelWithResults)
      });

      if (response.ok) {
        const result = await response.json();
        
        // –ö–æ–ø–∏—Ä—É–µ–º CSV –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        await navigator.clipboard.writeText(result.csv);
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º Google Sheets
        window.open(result.url, '_blank');
        
        alert('üìã CSV –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!\nüåê Google Sheets –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.\n\n–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ (Ctrl+V) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "Import data".');
      } else {
        const errorText = await response.text();
        throw new Error(errorText || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
      }
    } catch (error) {
      console.error('Google Sheets export error:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const generateResultsData = () => {
    if (!currentModel?.sheets) return [];

    const revenueSheet = currentModel.sheets.find(s => s.type === 'revenue');
    const expensesSheet = currentModel.sheets.find(s => s.type === 'expenses');
    
    const results = [
      ['–ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–æ–¥–µ–ª–∏', '', '', '', ''],
      ['–°–æ–∑–¥–∞–Ω–æ:', new Date().toLocaleDateString('ru-RU'), '', '', ''],
      ['–ú–æ–¥–µ–ª—å:', currentModel.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è', '', '', ''],
      ['–û—Ç—Ä–∞—Å–ª—å:', currentModel.industry || '–û–±—â–∞—è', '', '', ''],
      ['', '', '', '', ''],
      ['–§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', '–ì–æ–¥ 1', '–ì–æ–¥ 2', '–ì–æ–¥ 3', '–ì–æ–¥ 4'],
      ['', '', '', '', '']
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ–¥–∞–º
    if (revenueSheet?.data && expensesSheet?.data) {
      // –°—É–º–º–∏—Ä—É–µ–º –≤—ã—Ä—É—á–∫—É
      const revenueTotals = ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞'];
      const expensesTotals = ['–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'];
      const profitTotals = ['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'];
      
      for (let year = 1; year <= 4; year++) {
        let revenueTotal = 0;
        let expensesTotal = 0;
        
        // –°—É–º–º–∏—Ä—É–µ–º –≤—ã—Ä—É—á–∫—É –∑–∞ –≥–æ–¥
        revenueSheet.data.forEach((row, index) => {
          if (index > 0 && row[year]) {
            const value = typeof row[year] === 'string' ? 
              parseFloat(row[year].replace(/[^\d.-]/g, '')) || 0 : 
              row[year] || 0;
            revenueTotal += value;
          }
        });
        
        // –°—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –≥–æ–¥
        expensesSheet.data.forEach((row, index) => {
          if (index > 0 && row[year]) {
            const value = typeof row[year] === 'string' ? 
              parseFloat(row[year].replace(/[^\d.-]/g, '')) || 0 : 
              row[year] || 0;
            expensesTotal += value;
          }
        });
        
        revenueTotals.push(Math.round(revenueTotal).toLocaleString('ru-RU'));
        expensesTotals.push(Math.round(expensesTotal).toLocaleString('ru-RU'));
        profitTotals.push(Math.round(revenueTotal - expensesTotal).toLocaleString('ru-RU'));
      }
      
      results.push(revenueTotals, expensesTotals, profitTotals);
    }

    results.push(
      ['', '', '', '', ''],
      ['–ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò', '', '', '', ''],
      ['–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '15%', '18%', '20%', '22%'],
      ['–¢–µ–º–ø —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏', '0%', '15%', '18%', '12%'],
      ['ROI (–≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π)', '8%', '12%', '16%', '20%'],
      ['', '', '', '', ''],
      ['–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò', '', '', '', ''],
      ['‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ', '', '', '', ''],
      ['‚Ä¢ –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∂–¥—ã–π –∫–≤–∞—Ä—Ç–∞–ª', '', '', '', ''],
      ['‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω/—Ñ–∞–∫—Ç', '', '', '', ''],
      ['‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏', '', '', '', '']
    );

    return results;
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è—á–µ–π–∫–∏
  const handleCellUpdate = async (sheetId: string, row: number, col: number, value: string) => {
    if (!currentModel) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    const updatedSheets = currentModel.sheets.map(sheet => {
      if (sheet.id === sheetId) {
        const newData = [...sheet.data];
        if (!newData[row]) newData[row] = [];
        newData[row][col] = value;
        return { ...sheet, data: newData };
      }
      return sheet;
    });

    setCurrentModel({ ...currentModel, sheets: updatedSheets });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try {
      await fetch('/api/model/update-cell', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          modelId: currentModel.id,
          sheetId,
          row,
          col,
          value
        })
      });
    } catch (error) {
      console.error('Error updating cell:', error);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const handleAddRow = async (sheetId: string, rowData: string[]) => {
    if (!currentModel) return;

    const updatedSheets = currentModel.sheets.map(sheet => {
      if (sheet.id === sheetId) {
        const newData = [...sheet.data, rowData];
        return { ...sheet, data: newData };
      }
      return sheet;
    });

    setCurrentModel({ ...currentModel, sheets: updatedSheets });

    try {
      await fetch('/api/model/add-row', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          modelId: currentModel.id,
          sheetId,
          rowData
        })
      });
    } catch (error) {
      console.error('Error adding row:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
  const loadTemplateById = async (templateId: string) => {
    try {
      const response = await fetch(`/api/templates/${templateId}`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞');
      }
      
      const templateData = await response.json();
      
      const model: FinancialModel = {
        id: `model_${Date.now()}`,
        name: `–ú–æ–¥–µ–ª—å: ${templateData.sheets?.[0]?.name || templateId}`,
        industry: templateId,
        template: templateId,
        sheets: templateData.sheets || [],
        assumptions: templateData.assumptions || {},
        createdAt: new Date().toISOString(),
        lastModified: new Date().toISOString()
      };
      
      setCurrentModel(model);
      setActiveSheet(model.sheets[0]?.id || 'assumptions');
      setShowTemplateGallery(false);
      
    } catch (error) {
      console.error('Error loading template:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
  const handleModelGenerated = (model: any) => {
    const fullModel: FinancialModel = {
      ...model,
      industry: model.industry || 'general',
      template: model.template || 'custom',
      assumptions: model.assumptions || {},
      lastModified: new Date().toISOString()
    };
    
    setCurrentModel(fullModel);
    setActiveSheet(fullModel.sheets[0]?.id || 'assumptions');
    setShowModelGenerator(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleContextMenu = (row: number, col: number, event: React.MouseEvent) => {
    event.preventDefault();
    if (!currentModel) return;

    const sheet = currentModel.sheets.find(s => s.id === activeSheet);
    if (!sheet) return;

    const cellValue = sheet.data[row]?.[col] || '';
    
    setContextMenu({
      isOpen: true,
      position: { x: event.clientX, y: event.clientY },
      cellValue,
      rowIndex: row,
      colIndex: col
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleContextAction = async (action: string) => {
    if (!currentModel) return;
    
    const sheet = currentModel.sheets.find(s => s.id === activeSheet);
    if (!sheet) return;

    const { rowIndex, colIndex, cellValue } = contextMenu;

    switch (action) {
      case 'edit':
        setEditingCell({ row: rowIndex, col: colIndex });
        setCurrentCell({ row: rowIndex, col: colIndex, value: String(cellValue) });
        break;

      case 'copy':
        if (navigator.clipboard) {
          await navigator.clipboard.writeText(String(cellValue));
        }
        break;

      case 'format-currency':
        if (typeof cellValue === 'number' || !isNaN(parseFloat(String(cellValue)))) {
          const numValue = parseFloat(String(cellValue));
          handleCellUpdate(sheet.id, rowIndex, colIndex, `${numValue.toLocaleString('ru-RU')} —Ç–µ–Ω–≥–µ`);
        }
        break;

      case 'format-percent':
        if (typeof cellValue === 'number' || !isNaN(parseFloat(String(cellValue)))) {
          const numValue = parseFloat(String(cellValue));
          handleCellUpdate(sheet.id, rowIndex, colIndex, `${(numValue * 100).toFixed(1)}%`);
        }
        break;

      case 'create-formula':
        setEditingCell({ row: rowIndex, col: colIndex });
        setCurrentCell({ row: rowIndex, col: colIndex, value: '=' });
        break;

      case 'quick-sum':
        if (rowIndex > 1) {
          const formula = `=SUM(${String.fromCharCode(65 + colIndex)}2:${String.fromCharCode(65 + colIndex)}${rowIndex})`;
          handleCellUpdate(sheet.id, rowIndex, colIndex, formula);
        }
        break;

      case 'quick-growth':
        if (colIndex > 1) {
          const formula = `=${String.fromCharCode(65 + colIndex - 1)}${rowIndex + 1}*1.15`;
          handleCellUpdate(sheet.id, rowIndex, colIndex, formula);
        }
        break;

      case 'quick-percent':
        const formula = `=B${rowIndex + 1}*0.05`;
        handleCellUpdate(sheet.id, rowIndex, colIndex, formula);
        break;

      case 'insert-row-above':
        insertRow(sheet.id, rowIndex);
        break;

      case 'insert-row-below':
        insertRow(sheet.id, rowIndex + 1);
        break;

      case 'delete-row':
        deleteRow(sheet.id, rowIndex);
        break;

      case 'add-revenue-item':
        addRevenueItem(sheet.id);
        break;

      case 'add-expense-item':
        addExpenseItem(sheet.id);
        break;
    }

    setContextMenu({ ...contextMenu, isOpen: false });
  };

  // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
  const insertRow = (sheetId: string, atIndex: number) => {
    if (!currentModel) return;

    const updatedSheets = currentModel.sheets.map(sheet => {
      if (sheet.id === sheetId) {
        const newData = [...sheet.data];
        const newRow = new Array(newData[0]?.length || 4).fill('');
        newRow[0] = '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è';
        newData.splice(atIndex, 0, newRow);
        return { ...sheet, data: newData };
      }
      return sheet;
    });

    setCurrentModel({ ...currentModel, sheets: updatedSheets });
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  const deleteRow = (sheetId: string, rowIndex: number) => {
    if (!currentModel || rowIndex <= 0) return;

    const updatedSheets = currentModel.sheets.map(sheet => {
      if (sheet.id === sheetId) {
        const newData = [...sheet.data];
        newData.splice(rowIndex, 1);
        return { ...sheet, data: newData };
      }
      return sheet;
    });

    setCurrentModel({ ...currentModel, sheets: updatedSheets });
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–æ—Ö–æ–¥–∞
  const addRevenueItem = (sheetId: string) => {
    const newRow = ['–ù–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞', '0', '0', '0'];
    handleAddRow(sheetId, newRow);
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
  const addExpenseItem = (sheetId: string) => {
    const newRow = ['–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤', '0', '0', '0'];
    handleAddRow(sheetId, newRow);
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –º–æ–¥–µ–ª–∏
  const generateNewNumbers = () => {
    if (!currentModel) return;

    const sheet = currentModel.sheets.find(s => s.id === activeSheet);
    if (!sheet) return;

    const updatedSheets = currentModel.sheets.map(s => {
      if (s.id === activeSheet) {
        const newData = [...s.data];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö —è—á–µ–µ–∫
        for (let row = 1; row < newData.length; row++) {
          for (let col = 1; col < newData[row].length; col++) {
            const cellValue = newData[row][col];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ —á–∏—Å–ª–æ–º –∏ –Ω–µ —Ñ–æ—Ä–º—É–ª–æ–π
            if (typeof cellValue === 'number' || 
                (typeof cellValue === 'string' && !isNaN(parseFloat(cellValue)) && !cellValue.startsWith('='))) {
              
              const currentValue = typeof cellValue === 'number' ? cellValue : parseFloat(cellValue);
              
              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º ¬±20% –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
              const variation = 0.2; // 20%
              const minValue = currentValue * (1 - variation);
              const maxValue = currentValue * (1 + variation);
              const newValue = Math.round(minValue + Math.random() * (maxValue - minValue));
              
              newData[row][col] = newValue;
            }
          }
        }
        
        return { ...s, data: newData };
      }
      return s;
    });

    setCurrentModel({ 
      ...currentModel, 
      sheets: updatedSheets,
      lastModified: new Date().toISOString()
    });
  };

  // Drag and Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleDragStart = (row: number, col: number) => {
    if (col !== 0) return; // –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–ª–∏–∫–æ–º
    setDragState({
      isDragging: true,
      draggedRow: row,
      targetRow: null
    });
  };

  const handleDragOver = (row: number, col: number) => {
    if (!dragState.isDragging || col !== 0) return;
    setDragState({
      ...dragState,
      targetRow: row
    });
  };

  const handleDrop = (row: number, col: number) => {
    if (!dragState.isDragging || !currentModel || dragState.draggedRow === null) return;

    const sheet = currentModel.sheets.find(s => s.id === activeSheet);
    if (!sheet) return;

    const newData = [...sheet.data];
    const draggedRowData = newData[dragState.draggedRow];
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
    newData.splice(dragState.draggedRow, 1);
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
    const insertIndex = row > dragState.draggedRow ? row - 1 : row;
    newData.splice(insertIndex, 0, draggedRowData);

    const updatedSheets = currentModel.sheets.map(s => 
      s.id === activeSheet ? { ...s, data: newData } : s
    );

    setCurrentModel({ ...currentModel, sheets: updatedSheets });
    
    setDragState({
      isDragging: false,
      draggedRow: null,
      targetRow: null
    });
  };

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Model Generator Modal - –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞ */}
      {showModelGenerator && (
        <ModelGenerator
          onModelGenerated={handleModelGenerated}
          onClose={() => setShowModelGenerator(false)}
        />
      )}

      {/* Template Gallery Modal - –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞ */}
      {showTemplateGallery && (
        <TemplateGallery
          onTemplateSelected={loadTemplateById}
          onCustomGenerate={() => {
            setShowTemplateGallery(false);
            setShowModelGenerator(true);
          }}
          onClose={() => setShowTemplateGallery(false)}
        />
      )}

      {isGenerating && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-xl p-8 max-w-md w-full mx-4">
            <div className="text-center">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                ü§ñ –ò–ò —Å–æ–∑–¥–∞–µ—Ç –≤–∞—à—É –º–æ–¥–µ–ª—å
              </h3>
              <p className="text-gray-600 dark:text-gray-300 text-sm">
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –±–∏–∑–Ω–µ—Å –∏ —Å—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å...
              </p>
            </div>
          </div>
        </div>
      )}

      {!currentModel ? (
        // ... existing landing page content ...
        <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 text-white">
          <div className="absolute inset-0 bg-black bg-opacity-40"></div>
          
          <div className="relative z-10">
                          <div className="flex justify-between items-center p-6 bg-gray-900/50 backdrop-blur-sm border-b border-gray-700">
                <h1 className="text-2xl font-bold text-white">
                  FinSights AI - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
                </h1>
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => window.history.back()}
                    className="flex items-center space-x-2 bg-gray-800 hover:bg-gray-700 px-4 py-2 rounded-lg transition text-white"
                  >
                    <span>‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É</span>
                  </button>
                </div>
              </div>

            <div className="max-w-7xl mx-auto px-6 py-12">
              {/* Hero Section */}
              <div className="text-center mb-16">
                <h1 className="text-5xl md:text-6xl font-bold text-white mb-6">
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                  <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent"> —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏</span>
                </h1>
                <p className="text-xl text-gray-300 max-w-3xl mx-auto mb-8">
                  –≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ 3-–æ—Ç—á–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞ –º–∏–Ω—É—Ç—ã, 
                  –∞ –Ω–µ —á–∞—Å—ã. –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–ª–∏ –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å.
                </p>
              </div>

              {/* AI Generator Section */}
              <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-8 mb-12 border border-gray-700">
                <div className="text-center mb-8">
                  <h2 className="text-3xl font-bold text-white mb-4">ü§ñ –°–æ–∑–¥–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò</h2>
                  <p className="text-gray-300">–û–ø–∏—à–∏—Ç–µ –≤–∞—à –±–∏–∑–Ω–µ—Å, –∏ –ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å</p>
                </div>
                
                <div className="max-w-2xl mx-auto">
                  <textarea
                    value={customBusiness}
                    onChange={(e) => setCustomBusiness(e.target.value)}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Ø –æ—Ç–∫—Ä—ã–≤–∞—é –∫–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. 30 –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç, —Ä–∞–±–æ—Ç–∞–µ–º —Å 8:00 –¥–æ 22:00. –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ 1500 —Ç–µ–Ω–≥–µ. –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ Glovo..."
                    className="w-full h-32 bg-gray-700 text-white rounded-lg p-4 border border-gray-600 focus:border-blue-500 focus:outline-none resize-none"
                  />
                  <button
                    onClick={() => setShowModelGenerator(true)}
                    className="w-full mt-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition"
                  >
                    üöÄ –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å —Å –ò–ò
                  </button>
                </div>
              </div>

              {/* Templates Section */}
              <div>
                <div className="text-center mb-8">
                  <h2 className="text-3xl font-bold text-white mb-4">üìã –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã</h2>
                  <p className="text-gray-300">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏</p>
                  <button
                    onClick={() => setShowTemplateGallery(true)}
                    className="mt-4 bg-white text-gray-900 py-2 px-6 rounded-lg font-medium hover:bg-gray-100 transition"
                  >
                    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã ‚Üí
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {templates.slice(0, 6).map((template) => (
                    <div
                      key={template.id}
                      className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-6 border border-gray-700 hover:border-gray-600 transition cursor-pointer"
                      onClick={() => loadTemplate(template)}
                    >
                      <div className="flex items-center mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white text-xl mr-4">
                          {template.category === 'food' ? 'üçΩÔ∏è' : 
                           template.category === 'tech' ? 'üíª' : 
                           template.category === 'retail' ? 'üõçÔ∏è' : 'üè¢'}
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">{template.name}</h3>
                          <p className="text-gray-400 text-sm">{template.category}</p>
                        </div>
                      </div>
                      <p className="text-gray-300 text-sm mb-4">{template.description}</p>
                      <div className="flex justify-between items-center">
                        <span className="text-blue-400 text-sm font-medium">–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</span>
                        <span className="text-green-400 text-xs">‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      ) : (
        // Existing model editor interface
        <div>
          {/* Header */}
          <div className="bg-gray-800 border-b border-gray-700 px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => setCurrentModel(null)}
                  className="text-gray-400 hover:text-white transition"
                >
                  ‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
                </button>
                <div>
                  <h1 className="text-xl font-bold text-white">{currentModel.name}</h1>
                  <p className="text-gray-400 text-sm">
                    –°–æ–∑–¥–∞–Ω–æ: {new Date(currentModel.createdAt).toLocaleDateString('ru-RU')}
                  </p>
                </div>
              </div>
              <div className="flex items-center space-x-3">
                <button
                  onClick={() => setShowAIAssistant(true)}
                  className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded text-sm font-medium transition"
                >
                  ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫
                </button>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="flex h-screen">
            {/* Left Sidebar - Sheets */}
            <div className="w-80 bg-gray-800 border-r border-gray-700 overflow-y-auto">
              <div className="p-4">
                <div className="mb-4">
                  <h2 className="text-lg font-semibold text-gray-200 mb-3">–õ–ò–°–¢–´ –ú–û–î–ï–õ–ò</h2>
                  <div className="flex space-x-2 mb-4">
                    <button
                      onClick={() => setShowTemplateGallery(true)}
                      className="flex-1 bg-gray-700 hover:bg-gray-600 text-white text-xs py-2 px-3 rounded transition"
                    >
                      üìä –®–∞–±–ª–æ–Ω—ã
                    </button>
                    <button
                      onClick={() => setShowModelGenerator(true)}
                      className="flex-1 bg-blue-600 hover:bg-blue-700 text-white text-xs py-2 px-3 rounded transition"
                    >
                      ü§ñ –ò–ò –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
                    </button>
                  </div>
                </div>
                <div className="space-y-2">
                  {currentModel.sheets.map((sheet) => (
                    <button
                      key={sheet.id}
                      onClick={() => setActiveSheet(sheet.id)}
                      className={`w-full flex items-center justify-between p-3 rounded-lg transition ${
                        activeSheet === sheet.id
                          ? 'bg-blue-600 text-white'
                          : 'text-gray-300 hover:bg-gray-700'
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <span className="text-lg">{sheet.icon}</span>
                        <span className="font-medium">{sheet.name}</span>
                      </div>
                      {sheet.type && (
                        <span className="text-xs bg-gray-600 px-2 py-1 rounded">
                          {sheet.type}
                        </span>
                      )}
                    </button>
                  ))}
                </div>

                {/* Model Stats */}
                <div className="mt-8 p-4 bg-gray-700 rounded-lg">
                  <h3 className="text-sm font-semibold text-gray-200 mb-3">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏</h3>
                  <div className="space-y-2 text-xs text-gray-400">
                    <div>–õ–∏—Å—Ç–æ–≤: {currentModel.sheets.length}</div>
                    <div>–°–æ–∑–¥–∞–Ω–∞: {new Date(currentModel.createdAt).toLocaleString('ru-RU')}</div>
                    <div>–ò–∑–º–µ–Ω–µ–Ω–∞: {new Date().toLocaleString('ru-RU')}</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Main Content Area */}
            <div className="flex-1 flex flex-col bg-white dark:bg-gray-900">
              {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ */}
              <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4 flex justify-between items-center">
                <div>
                  <h1 className="text-xl font-bold text-gray-900 dark:text-white">
                    {currentModel.name || '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å'}
                  </h1>
                                     <p className="text-gray-600 dark:text-gray-400 text-sm">
                     {activeSheet && currentModel.sheets.find(s => s.id === activeSheet)?.name || '–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç'}
                   </p>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => setActiveSheet('results')}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                      activeSheet === 'results' 
                        ? 'bg-purple-600 text-white' 
                        : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                    }`}
                  >
                    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                  </button>
                </div>
              </div>

              {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –†–µ–¥–∞–∫—Ç–æ—Ä */}
              {activeSheet === 'results' ? (
                <ResultsDashboard 
                  model={currentModel}
                  onExportExcel={exportToExcel}
                  onExportPDF={exportToPDF}
                />
              ) : activeSheet && currentModel.sheets.find(s => s.id === activeSheet) ? (
                <div className="flex-1 flex flex-col">
                  {/* Formula Bar */}
                  <FormulaBar
                    currentCell={currentCell}
                    isEditing={editingCell !== null}
                    onFormulaChange={(formula) => {
                      if (editingCell) {
                        const sheet = currentModel.sheets.find(s => s.id === activeSheet);
                        if (sheet) {
                          handleCellUpdate(sheet.id, editingCell.row, editingCell.col, formula);
                        }
                      }
                    }}
                    onEnter={() => setEditingCell(null)}
                    onCancel={() => setEditingCell(null)}
                  />

                  {/* Toolbar */}
                  <div className="bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-2">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm text-gray-600 dark:text-gray-400">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</span>
                          <button
                            onClick={() => {
                              const sheet = currentModel.sheets.find(s => s.id === activeSheet);
                              if (sheet) {
                                if (activeSheet === 'revenue') {
                                  addRevenueItem(sheet.id);
                                } else if (activeSheet === 'expenses') {
                                  addExpenseItem(sheet.id);
                                } else {
                                  insertRow(sheet.id, sheet.data.length);
                                }
                              }
                            }}
                            className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm transition"
                          >
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É
                          </button>
                          <button
                            onClick={() => {
                              if (currentCell.row > 0 && currentCell.col > 0) {
                                const sheet = currentModel.sheets.find(s => s.id === activeSheet);
                                if (sheet) {
                                  const formula = `=SUM(${String.fromCharCode(65 + currentCell.col)}2:${String.fromCharCode(65 + currentCell.col)}${currentCell.row + 1})`;
                                  handleCellUpdate(sheet.id, currentCell.row, currentCell.col, formula);
                                }
                              }
                            }}
                            className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm transition"
                          >
                            ‚àë –°—É–º–º–∞
                          </button>
                          <button
                            onClick={() => {
                              console.log('Growth button clicked. Current cell:', currentCell);
                              if (currentCell.row >= 0 && currentCell.col >= 0) {
                                const sheet = currentModel.sheets.find(s => s.id === activeSheet);
                                console.log('Found sheet:', sheet?.id, 'Row:', currentCell.row, 'Col:', currentCell.col);
                                
                                if (sheet && sheet.data[currentCell.row]) {
                                  if (currentCell.col > 1) {
                                    // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–æ—Å—Ç–∞ –Ω–∞ 15% –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–¥–∞
                                    const formula = `=${String.fromCharCode(65 + currentCell.col - 1)}${currentCell.row + 1}*1.15`;
                                    console.log('Applying growth formula:', formula);
                                    handleCellUpdate(sheet.id, currentCell.row, currentCell.col, formula);
                                  } else if (currentCell.col === 1) {
                                    // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ - –ø—Ä–æ—Å—Ç–æ —É–º–Ω–æ–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 1.15
                                    const currentValue = sheet.data[currentCell.row]?.[currentCell.col];
                                    const numValue = parseFloat(String(currentValue || '0').replace(/[^\d.-]/g, ''));
                                    console.log('Current value:', currentValue, 'Parsed:', numValue);
                                    if (!isNaN(numValue)) {
                                      const newValue = String(Math.round(numValue * 1.15));
                                      console.log('New value:', newValue);
                                      handleCellUpdate(sheet.id, currentCell.row, currentCell.col, newValue);
                                    }
                                  }
                                }
                              }
                            }}
                            className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm transition"
                          >
                            üìà –†–æ—Å—Ç 15%
                          </button>
                          <button
                            onClick={generateNewNumbers}
                            className="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1 rounded text-sm transition flex items-center space-x-1"
                          >
                            <span>üé≤</span>
                            <span>–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–∞</span>
                          </button>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <div className="text-xs text-gray-500 dark:text-gray-400">
                          üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —è—á–µ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        </div>
                        <div className="flex items-center space-x-1">
                          <div className="w-3 h-3 bg-green-100 dark:bg-green-900/20 border border-green-300 rounded"></div>
                          <span className="text-xs text-gray-600 dark:text-gray-400">–î–æ—Ö–æ–¥—ã</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <div className="w-3 h-3 bg-red-100 dark:bg-red-900/20 border border-red-300 rounded"></div>
                          <span className="text-xs text-gray-600 dark:text-gray-400">–†–∞—Å—Ö–æ–¥—ã</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <div className="w-3 h-3 bg-purple-100 dark:bg-purple-900/20 border border-purple-300 rounded"></div>
                          <span className="text-xs text-gray-600 dark:text-gray-400">–§–æ—Ä–º—É–ª—ã</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Spreadsheet */}
                  <div className="flex-1 overflow-auto">
                                        {(() => {
                      const currentSheet = currentModel.sheets.find(s => s.id === activeSheet);
                      if (!currentSheet) return <div>–õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

                      return (
                        <table className="w-full border-collapse">
                          <tbody>
                                                          {currentSheet.data.map((row, rowIndex) => (
                                <tr 
                                  key={rowIndex}
                                  onClick={(e) => {
                                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –∫–ª–∏–∫–∞
                                    const target = e.target as HTMLElement;
                                    const td = target.closest('td');
                                    if (td) {
                                      const cellIndex = Array.from(td.parentElement?.children || []).indexOf(td);
                                      if (cellIndex >= 0) {
                                        setCurrentCell({ 
                                          row: rowIndex, 
                                          col: cellIndex, 
                                          value: String(row[cellIndex] || '') 
                                        });
                                      }
                                    }
                                  }}
                                >
                                  {Array.isArray(row) ? row.map((cell, cellIndex) => (
                                    <EditableCell
                                      key={cellIndex}
                                      value={cell || ''}
                                      rowIndex={rowIndex}
                                      colIndex={cellIndex}
                                      isEditing={editingCell?.row === rowIndex && editingCell?.col === cellIndex}
                                      onStartEdit={(row, col) => {
                                        setEditingCell({ row, col });
                                        setCurrentCell({ row, col, value: String(cell || '') });
                                      }}
                                      onSave={(row, col, value) => {
                                        if (currentSheet) {
                                          handleCellUpdate(currentSheet.id, row, col, value);
                                        }
                                        setEditingCell(null);
                                      }}
                                      onCancel={() => {
                                        setEditingCell(null);
                                      }}
                                      isHeader={rowIndex === 0}
                                      isFormula={typeof cell === 'string' && cell.startsWith('=')}
                                      sheetType={currentSheet?.type}
                                      onContextMenu={handleContextMenu}
                                      isDragging={dragState.isDragging && dragState.draggedRow === rowIndex}
                                      onDragStart={handleDragStart}
                                      onDragOver={handleDragOver}
                                      onDrop={handleDrop}
                                    />
                                  )) : null}
                                </tr>
                              ))}
                          </tbody>
                        </table>
                      );
                    })()}
                  </div>
                </div>
              ) : (
                <div className="flex-1 flex items-center justify-center text-gray-500 dark:text-gray-400">
                  <div className="text-center">
                    <h3 className="text-xl font-semibold mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–∏—Å—Ç–∞–º –º–æ–¥–µ–ª–∏</p>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* AI Assistant Modal */}
          <AIFinancialAssistant
            isOpen={showAIAssistant}
            onClose={() => setShowAIAssistant(false)}
            currentSheet={activeSheet}
            currentCell={currentCell}
            onApplySuggestion={(suggestion) => {
              if (editingCell) {
                const sheet = currentModel.sheets.find(s => s.id === activeSheet);
                if (sheet) {
                  handleCellUpdate(sheet.id, editingCell.row, editingCell.col, suggestion);
                }
              }
              setShowAIAssistant(false);
            }}
            onAddRow={(rowData) => {
              const sheet = currentModel.sheets.find(s => s.id === activeSheet);
              if (sheet) {
                handleAddRow(sheet.id, rowData);
              }
            }}
          />

          {/* Context Menu */}
          <ContextMenu
            isOpen={contextMenu.isOpen}
            position={contextMenu.position}
            onClose={() => setContextMenu({ ...contextMenu, isOpen: false })}
            onAction={handleContextAction}
            cellValue={contextMenu.cellValue}
            rowIndex={contextMenu.rowIndex}
            colIndex={contextMenu.colIndex}
            sheetType={currentModel.sheets.find(s => s.id === activeSheet)?.type}
          />
        </div>
      )}
    </div>
  );
};
export default FinancialPage;