import React, { useState } from 'react';

interface ModelGeneratorProps {
  onModelGenerated: (model: any) => void;
  onClose: () => void;
}

interface BusinessInfo {
  name: string;
  industry: string;
  description: string;
  stage: 'startup' | 'existing' | 'expansion';
  timeframe: number;
  currency: string;
  location: string;
}

const ModelGenerator: React.FC<ModelGeneratorProps> = ({ onModelGenerated, onClose }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [isGenerating, setIsGenerating] = useState(false);
  const [businessInfo, setBusinessInfo] = useState<BusinessInfo>({
    name: '',
    industry: '',
    description: '',
    stage: 'startup',
    timeframe: 5,
    currency: 'KZT',
    location: 'Kazakhstan'
  });

  const industries = [
    { id: 'cafe', name: '‚òï –ö–∞—Ñ–µ / –†–µ—Å—Ç–æ—Ä–∞–Ω', description: '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã' },
    { id: 'retail', name: 'üõçÔ∏è –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è', description: '–ú–∞–≥–∞–∑–∏–Ω—ã, —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏' },
    { id: 'saas', name: 'üíª SaaS / IT', description: '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, –ø–æ–¥–ø–∏—Å–∫–∏' },
    { id: 'manufacturing', name: 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', description: '–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤' },
    { id: 'services', name: 'ü§ù –£—Å–ª—É–≥–∏', description: '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏' },
    { id: 'ecommerce', name: 'üõí E-commerce', description: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã' },
    { id: 'real_estate', name: 'üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', description: '–ê—Ä–µ–Ω–¥–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é' },
    { id: 'healthcare', name: 'üè• –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏, –∫–ª–∏–Ω–∏–∫–∏' },
    { id: 'education', name: 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', description: '–û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã, —Ç—Ä–µ–Ω–∏–Ω–≥–∏' },
    { id: 'logistics', name: 'üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞', description: '–î–æ—Å—Ç–∞–≤–∫–∞, —Å–∫–ª–∞–¥—Å–∫–∏–µ —É—Å–ª—É–≥–∏' },
    { id: 'tourism', name: 'üè® –¢—É—Ä–∏–∑–º', description: '–û—Ç–µ–ª–∏, —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏' },
    { id: 'automotive', name: 'üîß –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å', description: '–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π' },
    { id: 'beauty', name: 'üíÑ –ö—Ä–∞—Å–æ—Ç–∞', description: '–°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã, –°–ü–ê-—É—Å–ª—É–≥–∏' },
    { id: 'other', name: 'üìã –î—Ä—É–≥–æ–µ', description: '–ò–Ω–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' }
  ];

  const generateModel = async () => {
    setIsGenerating(true);
    
    try {
      const response = await fetch('/api/ai/generate-model', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          businessDescription: `${businessInfo.name} - ${businessInfo.description}`,
          industry: businessInfo.industry,
          stage: businessInfo.stage,
          timeframe: businessInfo.timeframe,
          currency: businessInfo.currency,
          language: 'ru'
        })
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏');
      }

      const generatedModel = await response.json();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const fullModel = {
        ...generatedModel,
        id: `model_${Date.now()}`,
        name: businessInfo.name,
        industry: businessInfo.industry,
        stage: businessInfo.stage,
        createdAt: new Date().toISOString(),
        currency: businessInfo.currency
      };

      onModelGenerated(fullModel);
      
    } catch (error) {
      console.error('Error generating model:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    } finally {
      setIsGenerating(false);
    }
  };

  const renderStep1 = () => (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          üöÄ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –ò–ò
        </h2>
        <p className="text-gray-600 dark:text-gray-300">
          –û–ø–∏—à–∏—Ç–µ –≤–∞—à –±–∏–∑–Ω–µ—Å, –∏ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å –∑–∞ –º–∏–Ω—É—Ç—ã
        </p>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
        </label>
        <input
          type="text"
          value={businessInfo.name}
          onChange={(e) => setBusinessInfo({...businessInfo, name: e.target.value})}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ—Ñ–µ–π–Ω—è '–£—é—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫'"
          className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
          –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å
        </label>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
          {industries.map(industry => (
            <button
              key={industry.id}
              onClick={() => setBusinessInfo({...businessInfo, industry: industry.id})}
              className={`p-4 text-left border-2 rounded-lg transition ${
                businessInfo.industry === industry.id
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                  : 'border-gray-200 dark:border-gray-600 hover:border-gray-300'
              }`}
            >
              <div className="font-medium text-gray-900 dark:text-white">{industry.name}</div>
              <div className="text-sm text-gray-500 dark:text-gray-400">{industry.description}</div>
            </button>
          ))}
        </div>
      </div>

      <div className="flex justify-between">
        <button
          onClick={onClose}
          className="px-6 py-2 text-gray-600 hover:text-gray-800 transition"
        >
          –û—Ç–º–µ–Ω–∞
        </button>
        <button
          onClick={() => setCurrentStep(2)}
          disabled={!businessInfo.name || !businessInfo.industry}
          className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition"
        >
          –î–∞–ª–µ–µ ‚Üí
        </button>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ
        </h2>
        <p className="text-gray-600 dark:text-gray-300">
          –ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –º–æ–¥–µ–ª—å
        </p>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          –û–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
        </label>
        <textarea
          value={businessInfo.description}
          onChange={(e) => setBusinessInfo({...businessInfo, description: e.target.value})}
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –±–∏–∑–Ω–µ—Å: —á—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç–µ, –∫–æ–º—É, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, –ø–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è..."
          rows={6}
          className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white resize-none"
        />
        <div className="text-sm text-gray-500 mt-1">
          –ù–∞–ø—Ä–∏–º–µ—Ä: "–ö–æ—Ñ–µ–π–Ω—è –≤ —Ü–µ–Ω—Ç—Ä–µ –ê–ª–º–∞—Ç—ã, 30 –º–µ—Å—Ç, —Ä–∞–±–æ—Ç–∞–µ–º —Å 7:00 –¥–æ 22:00, –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É..."
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –°—Ç–∞–¥–∏—è –±–∏–∑–Ω–µ—Å–∞
          </label>
          <select
            value={businessInfo.stage}
            onChange={(e) => setBusinessInfo({...businessInfo, stage: e.target.value as any})}
            className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
          >
            <option value="startup">üöÄ –°—Ç–∞—Ä—Ç–∞–ø (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)</option>
            <option value="existing">üìà –î–µ–π—Å—Ç–≤—É—é—â–∏–π –±–∏–∑–Ω–µ—Å</option>
            <option value="expansion">üéØ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ/—Ä–∞–∑–≤–∏—Ç–∏–µ</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –ü–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          </label>
          <select
            value={businessInfo.timeframe}
            onChange={(e) => setBusinessInfo({...businessInfo, timeframe: parseInt(e.target.value)})}
            className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
          >
            <option value={3}>3 –≥–æ–¥–∞</option>
            <option value={5}>5 –ª–µ—Ç</option>
            <option value={7}>7 –ª–µ—Ç</option>
            <option value={10}>10 –ª–µ—Ç</option>
          </select>
        </div>
      </div>

      <div className="flex justify-between">
        <button
          onClick={() => setCurrentStep(1)}
          className="px-6 py-2 text-gray-600 hover:text-gray-800 transition"
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <button
          onClick={() => setCurrentStep(3)}
          disabled={!businessInfo.description.trim()}
          className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition"
        >
          –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å ‚Üí
        </button>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6 text-center">
      <div>
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
        </h2>
        <p className="text-gray-600 dark:text-gray-300">
          –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –±–∏–∑–Ω–µ—Å –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –º–æ–¥–µ–ª—å
        </p>
      </div>

      <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
        <div className="font-medium text-gray-900 dark:text-white mb-2">
          {businessInfo.name}
        </div>
        <div className="text-sm text-gray-600 dark:text-gray-300 mb-4">
          {industries.find(i => i.id === businessInfo.industry)?.name} ‚Ä¢ 
          {businessInfo.stage === 'startup' ? ' –°—Ç–∞—Ä—Ç–∞–ø' : businessInfo.stage === 'existing' ? ' –î–µ–π—Å—Ç–≤—É—é—â–∏–π' : ' –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ'} ‚Ä¢ 
          {businessInfo.timeframe} –ª–µ—Ç
        </div>
        <div className="text-sm text-gray-500 dark:text-gray-400 italic">
          "{businessInfo.description.substring(0, 100)}..."
        </div>
      </div>

      {!isGenerating ? (
        <div className="space-y-4">
          <div className="text-sm text-gray-600 dark:text-gray-300">
            –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.
          </div>
          <div className="flex justify-center space-x-4">
            <button
              onClick={() => setCurrentStep(2)}
              className="px-6 py-2 text-gray-600 hover:text-gray-800 transition"
            >
              ‚Üê –ò–∑–º–µ–Ω–∏—Ç—å
            </button>
            <button
              onClick={generateModel}
              className="px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition font-medium"
            >
              ü§ñ –°–æ–∑–¥–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò
            </button>
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          </div>
          <div className="space-y-2 text-sm text-gray-600 dark:text-gray-300">
            <div>üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –±–∏–∑–Ω–µ—Å...</div>
            <div>üìä –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏...</div>
            <div>üí∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã...</div>
            <div>üìà –°—Ç—Ä–æ–∏–º –ø—Ä–æ–≥–Ω–æ–∑—ã...</div>
          </div>
          <div className="text-xs text-gray-500">
            –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-30 —Å–µ–∫—É–Ω–¥
          </div>
        </div>
      )}
    </div>
  );

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        {/* Progress bar */}
        <div className="bg-gray-200 dark:bg-gray-700 h-1">
          <div 
            className="bg-blue-600 h-1 transition-all duration-300"
            style={{ width: `${(currentStep / 3) * 100}%` }}
          />
        </div>

        <div className="p-6">
          {currentStep === 1 && renderStep1()}
          {currentStep === 2 && renderStep2()}
          {currentStep === 3 && renderStep3()}
        </div>
      </div>
    </div>
  );
};

export default ModelGenerator; 