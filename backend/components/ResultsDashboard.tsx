import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LineChart, Line, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';

interface ResultsDashboardProps {
  model: any;
  onExportExcel: () => void;
  onExportPDF: () => void;
}

const ResultsDashboard: React.FC<ResultsDashboardProps> = ({ model, onExportExcel, onExportPDF }) => {
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const extractModelData = () => {
    if (!model?.sheets) return null;

    const revenueSheet = model.sheets.find((s: any) => s.type === 'revenue');
    const expensesSheet = model.sheets.find((s: any) => s.type === 'expenses');
    const pnlSheet = model.sheets.find((s: any) => s.type === 'pnl');
    const assumptionsSheet = model.sheets.find((s: any) => s.type === 'assumptions');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const getYearlyData = (sheet: any) => {
      if (!sheet?.data) return [];
      
      const years = ['–ì–æ–¥ 1', '–ì–æ–¥ 2', '–ì–æ–¥ 3', '–ì–æ–¥ 4', '–ì–æ–¥ 5'];
      const data = [];
      
      for (let yearIndex = 0; yearIndex < 5; yearIndex++) {
        const yearData = { year: years[yearIndex] };
        
        sheet.data.forEach((row: any[], rowIndex: number) => {
          if (rowIndex === 0) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
          
          const label = row[0];
          const value = row[yearIndex + 1];
          
          if (label && value !== undefined) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            let numValue = 0;
            if (typeof value === 'string') {
              const cleanValue = value.replace(/[^\d.-]/g, '');
              numValue = parseFloat(cleanValue) || 0;
            } else if (typeof value === 'number') {
              numValue = value;
            }
            
            (yearData as any)[label] = numValue;
          }
        });
        
        data.push(yearData);
      }
      
      return data;
    };

    return {
      revenue: getYearlyData(revenueSheet),
      expenses: getYearlyData(expensesSheet),
      pnl: getYearlyData(pnlSheet),
      assumptions: assumptionsSheet?.data || []
    };
  };

  const modelData = extractModelData();

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
  const getFinancialChartData = () => {
    if (!modelData) return [];
    
    const years = ['–ì–æ–¥ 1', '–ì–æ–¥ 2', '–ì–æ–¥ 3', '–ì–æ–¥ 4', '–ì–æ–¥ 5'];
    return years.map(year => {
      const revenueYear = modelData.revenue.find(r => r.year === year);
      const expensesYear = modelData.expenses.find(e => e.year === year);
      const pnlYear = modelData.pnl.find(p => p.year === year);
      
      // –°—É–º–º–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
      const totalRevenue = Object.values(revenueYear || {})
        .filter(v => typeof v === 'number')
        .reduce((sum: number, val) => sum + (val as number), 0);
        
      const totalExpenses = Object.values(expensesYear || {})
        .filter(v => typeof v === 'number')
        .reduce((sum: number, val) => sum + (val as number), 0);
        
      const profit = totalRevenue - totalExpenses;
      
      return {
        year: year.replace('–ì–æ–¥ ', ''),
        revenue: Math.round(totalRevenue / 1000000), // –í –º–∏–ª–ª–∏–æ–Ω–∞—Ö
        expenses: Math.round(totalExpenses / 1000000),
        profit: Math.round(profit / 1000000),
        margin: totalRevenue > 0 ? Math.round((profit / totalRevenue) * 100) : 0
      };
    });
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
  const getExpensesBreakdown = () => {
    if (!modelData?.expenses || modelData.expenses.length === 0) return [];
    
    const firstYear = modelData.expenses[0];
    const breakdown: any[] = [];
    
    Object.entries(firstYear).forEach(([key, value]) => {
      if (key !== 'year' && typeof value === 'number' && value > 0) {
        breakdown.push({
          name: key,
          value: Math.round(value / 1000000), // –í –º–∏–ª–ª–∏–æ–Ω–∞—Ö
          percent: 0 // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∏–∂–µ
        });
      }
    });
    
    const total = breakdown.reduce((sum, item) => sum + item.value, 0);
    breakdown.forEach(item => {
      item.percent = Math.round((item.value / total) * 100);
    });
    
    return breakdown.slice(0, 6); // –¢–æ–ø-6 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  };

  const chartData = getFinancialChartData();
  const expensesBreakdown = getExpensesBreakdown();

  // –¶–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4'];

  // KPI –º–µ—Ç—Ä–∏–∫–∏
  const getKPIs = () => {
    if (chartData.length === 0) return null;
    
    const lastYear = chartData[chartData.length - 1];
    const firstYear = chartData[0];
    
    const revenueGrowth = firstYear.revenue > 0 
      ? Math.round(((lastYear.revenue - firstYear.revenue) / firstYear.revenue) * 100)
      : 0;
      
    const avgMargin = Math.round(chartData.reduce((sum, year) => sum + year.margin, 0) / chartData.length);
    
    return {
      totalRevenue: lastYear.revenue,
      totalProfit: lastYear.profit,
      avgMargin,
      revenueGrowth,
      breakEven: chartData.findIndex(year => year.profit > 0) + 1 || '–ù/–î'
    };
  };

  const kpis = getKPIs();

  if (!modelData) {
    return (
      <div className="p-8 text-center text-gray-500">
        <h3 className="text-xl font-semibold mb-4">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏</h3>
        <p>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
        <p className="text-sm mt-2">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ª–∏—Å—Ç—ã "–í—ã—Ä—É—á–∫–∞", "–†–∞—Å—Ö–æ–¥—ã" –∏ "–û—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª—è—Ö –∏ —É–±—ã—Ç–∫–∞—Ö"</p>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6 bg-gray-50 dark:bg-gray-900 min-h-screen">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —ç–∫—Å–ø–æ—Ä—Ç */}
      <div className="flex justify-between items-center bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏</h1>
          <p className="text-gray-600 dark:text-gray-400">{model.name || '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å'}</p>
        </div>
        <div className="flex gap-3">
          <button
            onClick={onExportExcel}
            className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            üìä Excel –æ—Ç—á–µ—Ç
          </button>
          <button
            onClick={onExportPDF}
            className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
          >
            üìÑ PDF –æ—Ç—á–µ—Ç
          </button>
        </div>
      </div>

      {/* KPI –º–µ—Ç—Ä–∏–∫–∏ */}
      {kpis && (
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">–í—ã—Ä—É—á–∫–∞ (5-–π –≥–æ–¥)</h3>
            <p className="text-2xl font-bold text-blue-600">{kpis.totalRevenue}M —Ç–≥</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">–ü—Ä–∏–±—ã–ª—å (5-–π –≥–æ–¥)</h3>
            <p className="text-2xl font-bold text-green-600">{kpis.totalProfit}M —Ç–≥</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞</h3>
            <p className="text-2xl font-bold text-purple-600">{kpis.avgMargin}%</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏</h3>
            <p className="text-2xl font-bold text-orange-600">{kpis.revenueGrowth}%</p>
          </div>
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">–ë–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å</h3>
            <p className="text-2xl font-bold text-teal-600">{kpis.breakEven} –≥–æ–¥</p>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≥–æ–¥–∞–º
        </h2>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="year" />
            <YAxis label={{ value: '–º–ª–Ω —Ç–µ–Ω–≥–µ', angle: -90, position: 'insideLeft' }} />
            <Tooltip formatter={(value) => [`${value} –º–ª–Ω —Ç–≥`, '']} />
            <Legend />
            <Bar dataKey="revenue" fill="#3B82F6" name="–í—ã—Ä—É—á–∫–∞" />
            <Bar dataKey="expenses" fill="#EF4444" name="–†–∞—Å—Ö–æ–¥—ã" />
            <Bar dataKey="profit" fill="#10B981" name="–ü—Ä–∏–±—ã–ª—å" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –ì—Ä–∞—Ñ–∏–∫ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            üìà –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≥–æ–¥–∞–º
          </h2>
          <ResponsiveContainer width="100%" height={250}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="year" />
              <YAxis label={{ value: '%', angle: -90, position: 'insideLeft' }} />
              <Tooltip formatter={(value) => [`${value}%`, '–ú–∞—Ä–∂–∞']} />
              <Line 
                type="monotone" 
                dataKey="margin" 
                stroke="#8B5CF6" 
                strokeWidth={3}
                dot={{ fill: '#8B5CF6', strokeWidth: 2, r: 6 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
            ü•ß –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (1-–π –≥–æ–¥)
          </h2>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie
                data={expensesBreakdown}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name}: ${percent}%`}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
              >
                {expensesBreakdown.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
                ))}
              </Pie>
              <Tooltip formatter={(value) => [`${value} –º–ª–Ω —Ç–≥`, '']} />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
        <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        </h2>
        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr className="border-b border-gray-200 dark:border-gray-700">
                <th className="text-left p-3 font-semibold text-gray-900 dark:text-white">–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</th>
                {chartData.map(year => (
                  <th key={year.year} className="text-right p-3 font-semibold text-gray-900 dark:text-white">
                    {year.year} –≥–æ–¥
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              <tr className="border-b border-gray-100 dark:border-gray-700">
                <td className="p-3 font-medium text-gray-900 dark:text-white">–í—ã—Ä—É—á–∫–∞ (–º–ª–Ω —Ç–≥)</td>
                {chartData.map(year => (
                  <td key={year.year} className="p-3 text-right text-blue-600 font-semibold">
                    {year.revenue.toLocaleString()}
                  </td>
                ))}
              </tr>
              <tr className="border-b border-gray-100 dark:border-gray-700">
                <td className="p-3 font-medium text-gray-900 dark:text-white">–†–∞—Å—Ö–æ–¥—ã (–º–ª–Ω —Ç–≥)</td>
                {chartData.map(year => (
                  <td key={year.year} className="p-3 text-right text-red-600 font-semibold">
                    {year.expenses.toLocaleString()}
                  </td>
                ))}
              </tr>
              <tr className="border-b border-gray-100 dark:border-gray-700">
                <td className="p-3 font-medium text-gray-900 dark:text-white">–ü—Ä–∏–±—ã–ª—å (–º–ª–Ω —Ç–≥)</td>
                {chartData.map(year => (
                  <td key={year.year} className={`p-3 text-right font-semibold ${year.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                    {year.profit.toLocaleString()}
                  </td>
                ))}
              </tr>
              <tr>
                <td className="p-3 font-medium text-gray-900 dark:text-white">–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)</td>
                {chartData.map(year => (
                  <td key={year.year} className="p-3 text-right text-purple-600 font-semibold">
                    {year.margin}%
                  </td>
                ))}
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 p-6 rounded-lg shadow">
        <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
          üí° –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <h3 className="font-semibold text-green-600">‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</h3>
            <ul className="text-sm space-y-1 text-gray-700 dark:text-gray-300">
              {kpis?.revenueGrowth && kpis.revenueGrowth > 0 && <li>‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏</li>}
              {kpis?.avgMargin && kpis.avgMargin > 10 && <li>‚Ä¢ –•–æ—Ä–æ—à–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞</li>}
              {kpis?.breakEven !== '–ù/–î' && typeof kpis?.breakEven === 'number' && kpis.breakEven <= 3 && <li>‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å</li>}
              <li>‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å</li>
            </ul>
          </div>
          <div className="space-y-2">
            <h3 className="font-semibold text-orange-600">‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h3>
            <ul className="text-sm space-y-1 text-gray-700 dark:text-gray-300">
              {kpis?.avgMargin && kpis.avgMargin < 10 && <li>‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—Ç—Ä–∞—Ç</li>}
              {kpis?.revenueGrowth && kpis.revenueGrowth < 0 && <li>‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Å–Ω–∏–∂–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏</li>}
              <li>‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã</li>
              <li>‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultsDashboard; 